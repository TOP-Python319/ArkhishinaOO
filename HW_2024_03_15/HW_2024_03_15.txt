
СТРОКИ, СПИСКИ, СЛОВАРИ, МНОЖЕСТВА

  ==========  1  ==========  

Написать программу, которая проверяет корректность введённого адреса электронной почты.

Программа получает из стандартного потока ввода (stdin) строку, содержащую адрес электронной почты. 
Программа выводит в stdout текстовый ответ.

Для забегающих вперёд: да, такие задачи обычно решаются с помощью регулярных выражений. Но в этой задаче вам необходимо использовать строковые методы:
    https://docs.python.org/3/library/stdtypes.html#string-methods

Примечание: в корректном e-mail обязательно есть символ '@', а после него символ '.'

Пример ввода 1:
    sgd@ya.ru

Пример вывода 1:
    да

Пример ввода 2:
    abcde@fghij

Пример вывода 2:
    нет



  ==========  2  ==========  

Написать программу, которая генерирует форматированную строку.

Программа в цикле получает из stdin названия фруктов (цикл прерывается при вводе пустой строки).
Программа выводит в stdout строку с перечислением всех фруктов, добавляя перед последним фруктом союз "и", а перед предыдущими (при их наличии) фруктами добавляя запятые (см. примеры вывода).

Пример ввода 1:
    яблоко

Пример вывода 1:
    яблоко

Пример ввода 2:
    яблоко
    груша

Пример вывода 2:
    яблоко и груша

Пример ввода 3:
    яблоко
    груша
    апельсин

Пример вывода 3:
    яблоко, груша и апельсин

Пример ввода 4:
    яблоко
    груша
    апельсин
    лимон

Пример вывода 4:
    яблоко, груша, апельсин и лимон



  ==========  3  ==========  

Написать программу, которая проверяет, является ли один список частью другого списка.

Программа два раза получает из stdin произвольное количество целых чисел, разделённых пробелом. Из каждого ввода формируется отдельный список объектов int.

Далее, программа определяет, можно ли из первого списка выбрать срез с шагом по умолчанию (единица) так, чтобы получился второй список.
    В решении не обязательно использовать именно срезы, есть много разных способов.

Программа выводит в stdout текстовый ответ.

Примечание: пустой список является частью любого списка, включая пустой.

Пример ввода 1:
    1 2 3 4
    1 2

Пример вывода 1:
    да

Пример ввода 2:
    1 2 3 4
    2 4

Пример вывода 2:
    нет



  ==========  4  ==========  

Написать программу, которая осуществляет поиск в словаре по значению.

Программа в цикле получает из stdin число и строку, разделённые пробелом (цикл прерывается при вводе пустой строки). Из полученных пар формируется словарь. 
    Например, это может быть словарь, задающий соответствие между кодами и названиями ошибок сервера базы данных (см. примеры ввода).
После завершения работы цикла программа получает из stdin строку — одно из введённых ранее значений.

Программа выводит в stdout ключ, соответствующий введённому значению. Если введённое значение отсутствует в словаре (маловероятный сценарий), то программа выводит текст "! value error !".

Пример ввода 1:
    1004 ER_CANT_CREATE_FILE
    1005 ER_CANT_CREATE_TABLE
    1006 ER_CANT_CREATE_DB
    1007 ER_DB_CREATE_EXISTS
    1008 ER_DB_DROP_EXISTS
    1010 ER_DB_DROP_RMDIR
    1016 ER_CANT_OPEN_FILE
    1022 ER_DUP_KEY
    
    ER_CANT_CREATE_DB

Пример вывода 1:
    1006

Пример ввода 2:
    4107 ER_SRS_UNUSED_PROJ_PARAMETER_PRESENT
    4108 ER_GIPK_COLUMN_EXISTS
    4111 ER_DROP_PK_COLUMN_TO_DROP_GIPK
    4113 ER_DA_EXPIRE_LOGS_DAYS_IGNORED
    4114 ER_CTE_RECURSIVE_NOT_UNION
    
    ER_CANT_OPEN_FILE

Пример вывода 2:
    ! value error !



  ==========  5  ==========  

Написать программу, которая подсчитывает количество очков за слово в настольной игре "Эрудит".

Программа получает из stdin строку, содержащую одно слово на русском языке.

Используя заранее составленный словарь программа вычисляет количество очков, которое должно быть начислено за введённое слово.
    Воспользуйтесь словарём из приложенного к заданию файла # ref 5.py

Программа выводит в stdout число.

Подумайте о способах оптимизации программы.

Примечание: согласно правилам большинства версий "Эрудита" буквы 'е' и 'ё' взаимозаменяемы.

Пример ввода:
    синхрофазотрон

Пример вывода:
    29



  ==========  6  ==========  

Написать программу, которая определяет представляет ли строка двоичное число.

Программа получает из stdin строку, содержащую один из нескольких возможных форматов строкового представления двоичного числа: без префикса, префикс 'b', префикс '0b'. 
Например:
    0101
    b11
    0b11001

Программа выводит в stdout текстовый ответ.

В этой задаче необходимо использовать множества.

Пример ввода:
    1b0101

Пример вывода:
    нет



  ==========  7  ==========  

Написать программу, которая объединяет словари без потери значений.

Эта задача довольно распространена в некоторых сценариях обработки данных.

Программа работает со списком словарей.
    Воспользуйтесь списком словарей из приложенного к заданию файла # ref 7.py

Программа формирует объединённый словарь по следующим правилам:
    - все ключи из всех исходных словарей должны быть включены в результирующий словарь
    - значениями в результирующем словаре становятся множества
    - значения, соответствующие одним и тем же ключам в исходных словарях, добавляются в одно множество, соответствующее такому же ключу в результирующем словаре

Программа выводит в stdout пары ключ: значение результирующего словаря по одной паре на строке.

Пример вывода:
    Барнаул: {7}
    Владивосток: {9}
    Волгоград: {9}
    Ижевск: {1, 5}
    Махачкала: {7}
    Москва: {9, 3}
    Омск: {9}
    Саратов: {3, 4}
    Ульяновск: {3}
    Казань: {8}
    Краснодар: {2}
    Самара: {3}
    Санкт-Петербург: {1, 6}
    Тюмень: {1, 4}
    Уфа: {7}
    Иркутск: {3}
    Кемерово: {1}
    Хабаровск: {6}
    Оренбург: {3}
    Ярославль: {3}



  ==========  8  ==========  дополнительно  

Написать программу, которая переименовывает дублирующиеся файлы.

Это задача, которую решает каждая операционная система при поптыке размещения одноимённых файлов в одном каталоге.

Программа получает из stdin строку, содержащую имена файлов, разделённые точкой с запятой и символом пробела (см. пример ввода).

Далее программа генерирует новые имена для повторяющихся файлов.
    
    Первый из одноимённых файл остаётся со своим исходным именем.
    Начиная со второго из одноимённых файла программа добавляет в имя файла перед расширением постфикс "_n", где n — количество раз, сколько такое имя файла уже встречалось.

Программа выводит в stdout отсортированные по алфавиту новые имена файлов, каждое имя на отдельной строке (см. пример вывода).

Примечание 1: расширение файла является частью имени, таким образом файлы a.txt и a.py не являются одноимёнными и могут без конфликта находиться в одном каталоге.

Примечание 2: расширения бывают составными, например .tar.gz

Пример ввода:
    1.py; 1.py; src.tar.gz; aux.h; main.cpp; functions.h; main.cpp; 1.py; main.cpp; src.tar.gz

Пример вывода:
    1.py
    1_2.py
    1_3.py
    aux.h
    functions.h
    main.cpp
    main_2.cpp
    main.py
    src.tar.gz
    src_2.tar.gz



  =========================  

Все файлы должны быть выполнены с помощью интерпретатора.
Текстовый ввод и вывод программы в стандартные потоки копируются.
Копия вывода без изменений помещается в конец файла с кодом задачи в виде комментария.

Невыполнение дополнительных задач не повлечёт снижения баллов за задание. Тем не менее, они настоятельно рекомендуются к решению.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель выполняет правки и пишет комментарии в файлах с кодом задач, после чего обновляет файлы в удалённом репозитории.
Регулярно получайте обновления в свой локальный репозиторий из удалённого репозитория.
