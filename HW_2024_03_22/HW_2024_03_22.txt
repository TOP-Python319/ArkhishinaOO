ОСНОВЫ РАБОТЫ С ФУНКЦИЯМИ

  ==========  1  ==========  

Написать функцию с именем strong_password, которая проверяет, является ли пароль надёжным.

Функция принимает обязательным позиционно-ключевым аргументом пароль в виде объекта str.

Функция возвращает объект bool.

Пароль считается надёжным, если соблюдены все нижеследующие условия:
    - длина пароля составляет восемь символов и более
    - в пароле присутствуют буквенные символы в обоих регистрах
    - в пароле присутствуют минимум два символа цифр
    - кроме символов букв и цифр в пароле присутствуют символы прочих категорий (пробел, знаки пунктуации, диакритические знаки и т.п.)

Написанную функцию необходимо протестировать вручную.
Пример ручного теста:
    >>> strong_password('aP3:kD_l3')
    True
    >>> strong_password('password')
    False



  ==========  2  ==========  

Написать функцию с именем taxi_cost, которая вычисляет стоимость поездки на такси.

Функция принимает обязательным аргументом длину маршрута в метрах и необязательным аргументом длительность ожидания в минутах.
    
    Оба аргумента должны быть позиционно-ключевыми и переданы в виде объектов int.
    
    Значение по умолчанию для длительности ожидания — ноль.

Функция возвращает стоимость поездки или None, если вычисление невозможно.
    
    Переданные длина маршрута и длительность ожидания могут быть нулями или положительными числами, но не должны быть отрицательными числами. 
    Если всё же функции были явно переданы отрицательные числа, то это означает невозможность корректно провести вычисление.
    
    Если вычисление возможно, то возвращается объект int.
        Аннотация нескольких типов записывается с помощью |
        >>> def func() -> int | None:
        ...     pass

Расчёт стоимости осуществляется по следующим правилам:
    - базовая стоимость поездки 80 рублей
    - за каждые 150 метров к стоимости добавляется 6 рублей
    - за каждую минуту ожидания к стоимости добавляется 3 рубля
    - при отмене поездки (длина маршрута составила 0 метров) к стоимости добавляется штраф 80 рублей и стоимость времени ожидания
    - итоговая стоимость математически округляется до целого числа

Написанную функцию необходимо протестировать вручную.
Пример ручного теста:
    >>> taxi_cost(1500)
    140
    >>> taxi_cost(2560)
    182
    >>> taxi_cost(0, 5)
    175
    >>> taxi_cost(42130, 8)
    1789
    >>> print(taxi_cost(-300))
    None



  ==========  3  ==========  

Написать функцию с именем numbers_strip, которая удаляет n минимальных и n максимальных чисел из списка.

Функция принимает обязательным аргументом список вещественных чисел, необязательными аргументами число n и переключатель вернуть исходный список или копию.
    
    Список чисел должен быть позиционно-ключевым, передаётся в виде объекта list, элементами списка должны быть объекты float.
    
    Число n должно быть позиционно-ключевым, передаётся в виде объекта int, значение по умолчанию — 1.
    
    Переключатель должен быть строго ключевым, передаётся в виде объекта bool, значение по умолчанию False.

Функция возвращает исходный списка с внесёнными изменениями или копию исходного списка в виде объекта list.

Примечание: не забывайте про встроенные функции min() и max()

Написанную функцию необходимо протестировать вручную.
Пример ручного теста:
    >>> sample = [1, 2, 3, 4]
    >>> sample_stripped = numbers_strip(sample)
    >>> sample_stripped
    [2, 3]

    >>> 
    >>> sample = [10, 20, 30, 40, 50]
    >>> sample_stripped = numbers_strip(sample, 2, copy=True)
    >>> sample_stripped
    [10, 20, 30, 40, 50]



  ==========  4  ==========  

Написать функцию с именем countable_nouns, которая возвращает существительное русского языка, согласованное с числом.

Функция принимает обязательными аргументами целое число и кортеж с вариантами согласования существительного (см. пример проверки).
    
    Первый аргумент должен быть передан в виде объекта int.
    
    Согласно правилам русского языка о согласовании составных количественных числительных и существительных, возможны три варианта согласования. Поэтому кортеж, передаваемый вторым аргументом, должен содержать ровно три объекта str.
        В отличие от списков, элементы кортежа аннотируются каждый по отдельности. Таким образом, кортеж из трёх строк должен быть аннотирован как tuple[str, str, str]

Функция возвращает одно слово из трёх, переданных вторым аргументом, которое согласуется с переданным первым аргументом числом.

С числительными из каждого числового ряда согласуется одна форма существительного или отдельное существительное:
    1, 21, 31 ... 451 ...
    2, 3, 4, 22, 23, 24 ... 342, 343, 344 ...
    0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 27, 28, 29, 30, 35 ... 675, 676 ...

Написанную функцию необходимо протестировать вручную.
Пример ручного теста:
    >>> countable_nouns(1, ("год", "года", "лет"))
    'год'
    >>> countable_nouns(2, ("год", "года", "лет"))
    'года'
    >>> countable_nouns(10, ("год", "года", "лет"))
    'лет'
    >>> countable_nouns(12, ("год", "года", "лет"))
    'лет'
    >>> countable_nouns(22, ("год", "года", "лет"))
    'года'



  ==========  5  ==========  

Написать функцию с именем orth_triangle, которая вычисляет третью сторону прямоугольного треугольника по двум переданным.

Функция принимает в качестве аргументов длины двух сторон: это могут быть два катета или один из катетов и гипотенуза. 
    
    Для того чтобы обеспечить требуемую гибкость, понадобится создать три строго ключевых параметра, каждый со значением по умолчанию.
    
    Длины стороны могут быть переданы в виде объектов int или float. 
        С точки зрения аннотации, достаточно указать float — в подавляющем большинстве случаев это означает, что объекты int также допустимы.

Функция возвращает длину третьей стороны треугольника или None, если вычисление невозможно.
    
    Если вычисление возможно, то возвращается объект float.
    
    Вычисление может оказаться невозможным при неправильной передаче аргументов. Например, если длина гипотенузы меньше длины катета.
    Также вычисление невозможно или не имеет смысла, если в функцию передаётся три, а не два аргумента.

Для выполнения расчётов используйте теорему Пифагора:
    https://mateshka.ru/math/geometry/treugolnik.html

Написанную функцию необходимо протестировать вручную.
Пример ручного теста:
    >>> orth_triangle(cathetus1=3, hypotenuse=5)
    4.0
    >>> orth_triangle(cathetus1=8, cathetus2=15)
    17.0
    >>> print(orth_triangle(cathetus2=9, hypotenuse=3))
    None



  ==========  6  ==========  дополнительно

Написать функцию с именем int_base, которая преобразовывает число из произвольной системы счисления в произвольную.

Функция принимает обязательными аргументами строковую запись числа, основание исходной системы счисления и основание целевой системы счисления.
    
    Все аргументы должны быть позиционно-ключевыми.
    
    Преобразовываемое число принимается в виде объекта str.
    
    Основания систем счисления принимаются в виде объектов int, в диапазоне от 2 до 36 включительно.
        Для записи дополнительных цифр в системах счисления с основанием больше десяти используйте латинские буквы от 'a' до 'z'. Имеет смысл сгенерировать словарь, задающий соотношения между числами в десятичной системе счисления и цифрами в системах счисления с бо́льшим основанием.
        Следите за регистром буквенных символов.

Функция возвращает строковое представление числа в целевой системе счисления или None в случае возникновения ошибок.

    Ошибки могут возникать в следующих случаях:
        - исходное или целевое основание системы счисления находится за пределами обозначенного выше диапазона
        - строковое представление числа не соответствует заявленной исходной системе счисления
    
Преобразования такого рода можно производить напрямую, но это потребует более сложной математики. В рамках данной задачи имеет смысл реализовать двойное преобразование: из исходной системы счисления в десятичную и затем из десятичной системы счисления в целевую. 

    Представляется целесообразным каждое из этих двух преобразований реализовать в виде отдельной функции. Продумайте самостоятельно сигнатуры этих функций (набор параметров, их типы, возвращаемые значения).
    
    О математике преобразований между системами счисления:
        http://math-info.hse.ru/a/2021-22/ling-dm/lectures/lecture9_delim.pdf

Написанную функцию необходимо протестировать вручную.
Пример ручного теста:
    >>> int_base('ff00', 16, 2)
    '1111111100000000'
    >>> int_base('1101010', 2, 30)
    '3g'



  =========================  

Каждая функция должна быть документирована, её параметры и возвращаемое значение должны быть аннотированы.

Работа функций тестируется в режиме инспекции файла с кодом.
Ввод и вывод тестов в стандартные потоки копируются.
Копия без изменений помещается в конец файла с кодом задачи в виде комментария.

Невыполнение дополнительных задач не повлечёт снижения баллов за задание. Тем не менее они настоятельно рекомендуются к решению.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Регулярно получайте обновления в свой локальный репозиторий из удалённого репозитория.